{
  "packages.yml": {
    "contents": "packages:\n  - git: \"https://github.com/dbt-labs/dbt_metrics.git\" \n    revision: main \n",
    "hash": "aeb7ad3b6ad6fa3e5d21035f51df580e",
    "path": "packages.yml"
  },
  "create_unparsed_manifest.py": {
    "contents": "from fs import open_fs\nfrom fs.walk import Walker\nimport hashlib\nimport json\n\n\ndef generate_manifest():\n    manifest = {}\n    with open_fs(\".\") as root:\n        walker = Walker(filter=[\"*.py\", \"*.yml\", \"*.sql\", \"*.md\", \"*.csv\"])\n        for path in walker.files(root):\n            contents = root.readtext(path)\n            manifest[path] = {\n                \"contents\": contents,\n                \"hash\": hashlib.md5(contents.encode()).hexdigest(),\n                \"path\": path,\n            }\n    return manifest\n\n\nif __name__ == \"__main__\":\n    manifest = generate_manifest()\n    json_manifest = json.dumps(manifest)\n    print(json_manifest)\n",
    "hash": "4f86d7902e4c114a753d017eee6aaf4d",
    "path": "create_unparsed_manifest.py"
  },
  "README.md": {
    "contents": "## Jaffle Shop Metrics \nIn case you are unfamiliar with the jaffle_shop dataset and dbt example project, \nI highly recommend you first review this [repository](https://github.com/dbt-labs/jaffle_shop) to familiarize yourself with it. This project builds on top of it\nto demonstrate a simple example of a metrics implementation with dbt Metrics \nfunctionality. \n\n### Differences From Jaffle Shop\nThere are a few differences in this example project when compared directly to \njaffle_shop. They are:\n- Restructuring the project based on the new guidance in [How we structure our projects](https://docs.getdbt.com/guides/best-practices/how-we-structure/1-guide-overview)\n- Customers:\n    - Removing the customer_lifetime_value field from customers. \n    - Adding a customer_status field to customers\n- Orders:\n    - Adding boolean flags for each payment method being present in order\n\n## How To Add Metrics To Jaffle Shop\nNow that we've gotten that information out of the way, lets add metrics to the \njaffle shop dataset! First, lets look at the ERD of the dataset. This dataset shows \nthe relationship between our two intermediate models, which we will later join into a \nsingle `mart` model for consumption.\n\n![Jaffle Shop ERD](etc/jaffle_shop_endstate_erd.png)\n\nHere we can see that our end-state data is based around two models:\n- Orders: All information about our orders. \n- Customers: All information about customers\n\n### The Prompt\nLet's say that our Jaffle Shop is really **really** interested in the average \norder amount of our orders - we want to sell more Jaffles! Our CEO has reached\nout to ask us to track average order amount but he wants to be able to see\nit in the context of payment methods AND customer status. So lets build that out \nwith the dbt Metric functionality!\n\n### Materializing \nThe CEO has requested this metric be able to see average order value by customer status,\nwhich is a field that lives in the customers table. dbt does not currently support\njoin logic which means that we need to create an intermediate model combining orders \nand customers upon which we can build the metric. \n\nWe accomplished this by creating the `orders` model, which serves \nto join `int_order_payments_pivoted` and `int_customer_order_history_joined` and materialize the output so that our metric can reference dimensions from both of them. For those curious about why we implemented this particular structure, please reference [How we structure our dbt projects](https://docs.getdbt.com/guides/best-practices/how-we-structure/1-guide-overview).\n\n### Defining\nNow that we've materialized the model that we'll use as the base for our metric, \nwe need to define the metric we're interested in. Following the format defined \nin the documentation, we created the metric definition shown below:\n\n```yaml\nmetrics:\n  - name: average_order_amount\n    label: Average Order Amount\n    model: ref('orders')\n    description: \"The average size of a jaffle order\"\n\n    type: average\n    sql: amount\n\n    timestamp: order_date\n    time_grains: [day, week, month]\n\n    dimensions:\n      - has_credit_card_payment\n      - has_coupon_payment\n      - has_bank_transfer_payment\n      - has_gift_card_payment\n      - customer_status\n```\n\nNow it's time to use metrics!\n\n### Caveat Pre dbt-Server\nMetrics are dynamic by nature and the ability to quickly iterate and\nconsume them is very important. The practice of materializing metric datasets\nwith pre-configured dimensions & time grains is considered an anti-pattern workaround to \ntest & tire kick the functionality in mid 2022. This will change, however, with the release of \ndbt Server in late 2022. It will allow the user/consumer/BI tool to provide the \nparameters of the BI query and get returned the exact answer they are looking for,\nas opposed to materializing each potential combination in tables.\n\n### Consuming\nTo query the metric, we use the macros contained within the [`dbt_metrics` package](https://github.com/dbt-labs/dbt_metrics). For more information on all the parameters and options offered in the metrics macro, please reference the ReadME of the repository.\n\nIn the meantime, lets also begin to answer our CEO's question. If he were first interested in the weekly average order amount, we would enter the following query in which we:\n- Define the metric being called\n- Provide the grain that we are interested in\n- Provide the list of dimensions we want to see\n\n```sql\nselect * \nfrom {{ metrics.metric(\n    metric_name='average_order_amount',\n    grain='week',\n    dimensions=[],\n) }}\n```\n\nThis returns a dataset where each row is equal to the average order amount metric \nfor that particular week! I would then point my BI tool of choice at the materialized database \nobject and visualize it for the CEO so his questions would be answered. \n\nIf he wanted to see it within a different tool, we don't need to worry about differing\ndefinitions across different methods of consumption - the definition is centralized\nand so consistency is ensured across the company.\n\nLets go sell some Jaffles!\n\n## Metrics At Scale\nJaffle shop aside, lets talk about what implementing metrics at scale would look like. The current implementation of dbt Metrics is largely inflexible from a consumers viewpoint - all the flexibility lives within the macro call and those who are unfamiliar/uncomfortable with dbt won't want to change the model. \n\nThis doesn't mean that it isn't useful. The sheer act of defining and then materializing metric values within a single table, sans dimensions, can be incredibly powerful. \n\nFor example, you could create a `metrics` folder/schema that only contains individual metric tables for reference by the entire company. This could be extremely helpful for high-level reporting across the business and allow consumers to interact in their tool of choice while the data remains consistent. As long as the model names where the metric macro is being called match the metric itself, there is reduced chance of consumer confusion. The entire organization can share a single view of what metrics are and build their understanding of the org around that.\n\n\n## Resources:\n- [What are dbt Metrics?](https://docs.getdbt.com/docs/building-a-dbt-project/metrics#about-metrics)\n- [How do I create dbt Metrics?](https://docs.getdbt.com/docs/building-a-dbt-project/metrics#declaring-a-metric)\n- [Ongoing Discussions around dbt Metrics](https://docs.getdbt.com/docs/building-a-dbt-project/metrics#ongoing-discussions)\n",
    "hash": "d79c1e842718b69b1f84c371b9be6d04",
    "path": "README.md"
  },
  "dbt_project.yml": {
    "contents": "name: \"jaffle_shop_metrics\"\n\nconfig-version: 2\nversion: \"0.1\"\n\nprofile: \"jaffle_shop_metrics\"\n\nmodel-paths: [\"models\"]\nseed-paths: [\"seeds\"]\ntest-paths: [\"tests\"]\nanalysis-paths: [\"analysis\"]\nmacro-paths: [\"macros\"]\n\ntarget-path: \"target\"\nclean-targets:\n  - \"target\"\n  - \"dbt_modules\"\n  - \"logs\"\n\nrequire-dbt-version: [\">=1.2.0\", \"<2.0.0\"]\n\nmodels:\n  jaffle_shop_metrics:\n    materialized: table\n    staging:\n      materialized: view\n",
    "hash": "5915b082d2c047ab9584409a2d69438c",
    "path": "dbt_project.yml"
  },
  "analysis/revenue.sql": {
    "contents": "select * \nfrom {{ metrics.calculate(\n    metric('revenue'),\n    grain='week',\n    dimensions=['customer_status']\n) }}\n",
    "hash": "ecf4aacec9813ef03c65aa7243975540",
    "path": "analysis/revenue.sql"
  },
  "analysis/average_order_amount.sql": {
    "contents": "select * \nfrom {{ metrics.calculate(\n    metric('average_order_amount'),\n    grain='week',\n    dimensions=[],\n) }}\n",
    "hash": "31896d40e5e7f8644752021b40cfe388",
    "path": "analysis/average_order_amount.sql"
  },
  "analysis/profit.sql": {
    "contents": "select * \nfrom {{ metrics.calculate(\n    metric('profit'),\n    grain='week',\n    dimensions=['customer_status']\n) }}\n",
    "hash": "a62877df504ed301ae81fe437057c368",
    "path": "analysis/profit.sql"
  },
  "analysis/expenses.sql": {
    "contents": "select * \nfrom {{ metrics.calculate(\n    metric('expenses'),\n    grain='week',\n    dimensions=[],\n) }}\n",
    "hash": "f0efde1277893d7071cb34d1215a6395",
    "path": "analysis/expenses.sql"
  },
  "models/overview.md": {
    "contents": "{% docs __overview__ %}\n\n## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop).\n\n{% enddocs %}\n",
    "hash": "21ff2115380f4e4dd630169d099ae2b1",
    "path": "models/overview.md"
  },
  "seeds/raw_customers.csv": {
    "contents": "id,first_name,last_name\n1,Michael,P.\n2,Shawn,M.\n3,Kathleen,P.\n4,Jimmy,C.\n5,Katherine,R.\n6,Sarah,R.\n7,Martin,M.\n8,Frank,R.\n9,Jennifer,F.\n10,Henry,W.\n11,Fred,S.\n12,Amy,D.\n13,Kathleen,M.\n14,Steve,F.\n15,Teresa,H.\n16,Amanda,H.\n17,Kimberly,R.\n18,Johnny,K.\n19,Virginia,F.\n20,Anna,A.\n21,Willie,H.\n22,Sean,H.\n23,Mildred,A.\n24,David,G.\n25,Victor,H.\n26,Aaron,R.\n27,Benjamin,B.\n28,Lisa,W.\n29,Benjamin,K.\n30,Christina,W.\n31,Jane,G.\n32,Thomas,O.\n33,Katherine,M.\n34,Jennifer,S.\n35,Sara,T.\n36,Harold,O.\n37,Shirley,J.\n38,Dennis,J.\n39,Louise,W.\n40,Maria,A.\n41,Gloria,C.\n42,Diana,S.\n43,Kelly,N.\n44,Jane,R.\n45,Scott,B.\n46,Norma,C.\n47,Marie,P.\n48,Lillian,C.\n49,Judy,N.\n50,Billy,L.\n51,Howard,R.\n52,Laura,F.\n53,Anne,B.\n54,Rose,M.\n55,Nicholas,R.\n56,Joshua,K.\n57,Paul,W.\n58,Kathryn,K.\n59,Adam,A.\n60,Norma,W.\n61,Timothy,R.\n62,Elizabeth,P.\n63,Edward,G.\n64,David,C.\n65,Brenda,W.\n66,Adam,W.\n67,Michael,H.\n68,Jesse,E.\n69,Janet,P.\n70,Helen,F.\n71,Gerald,C.\n72,Kathryn,O.\n73,Alan,B.\n74,Harry,A.\n75,Andrea,H.\n76,Barbara,W.\n77,Anne,W.\n78,Harry,H.\n79,Jack,R.\n80,Phillip,H.\n81,Shirley,H.\n82,Arthur,D.\n83,Virginia,R.\n84,Christina,R.\n85,Theresa,M.\n86,Jason,C.\n87,Phillip,B.\n88,Adam,T.\n89,Margaret,J.\n90,Paul,P.\n91,Todd,W.\n92,Willie,O.\n93,Frances,R.\n94,Gregory,H.\n95,Lisa,P.\n96,Jacqueline,A.\n97,Shirley,D.\n98,Nicole,M.\n99,Mary,G.\n100,Jean,M.\n",
    "hash": "c07b5acaaab79acc27a00ad489ab4150",
    "path": "seeds/raw_customers.csv"
  },
  "seeds/raw_orders.csv": {
    "contents": "id,user_id,order_date,status\r\n1,1,2018-01-01,returned\r\n2,3,2018-01-02,completed\r\n3,94,2018-01-04,completed\r\n4,50,2018-01-05,completed\r\n5,64,2018-01-05,completed\r\n6,54,2018-01-07,completed\r\n7,88,2018-01-09,completed\r\n8,2,2018-01-11,returned\r\n9,53,2018-01-12,completed\r\n10,7,2018-01-14,completed\r\n11,99,2018-01-14,completed\r\n12,59,2018-01-15,completed\r\n13,84,2018-01-17,completed\r\n14,40,2018-01-17,returned\r\n15,25,2018-01-17,completed\r\n16,39,2018-01-18,completed\r\n17,71,2018-01-18,completed\r\n18,64,2018-01-20,returned\r\n19,54,2018-01-22,completed\r\n20,20,2018-01-23,completed\r\n21,71,2018-01-23,completed\r\n22,86,2018-01-24,completed\r\n23,22,2018-01-26,return_pending\r\n24,3,2018-01-27,completed\r\n25,51,2018-01-28,completed\r\n26,32,2018-01-28,completed\r\n27,94,2018-01-29,completed\r\n28,8,2018-01-29,completed\r\n29,57,2018-01-31,completed\r\n30,69,2018-02-02,completed\r\n31,16,2018-02-02,completed\r\n32,28,2018-02-04,completed\r\n33,42,2018-02-04,completed\r\n34,38,2018-02-06,completed\r\n35,80,2018-02-08,completed\r\n36,85,2018-02-10,completed\r\n37,1,2018-02-10,completed\r\n38,51,2018-02-10,completed\r\n39,26,2018-02-11,completed\r\n40,33,2018-02-13,completed\r\n41,99,2018-02-14,completed\r\n42,92,2018-02-16,completed\r\n43,31,2018-02-17,completed\r\n44,66,2018-02-17,completed\r\n45,22,2018-02-17,completed\r\n46,6,2018-02-19,completed\r\n47,50,2018-02-20,completed\r\n48,27,2018-02-21,completed\r\n49,35,2018-02-21,completed\r\n50,51,2018-02-23,completed\r\n51,71,2018-02-24,completed\r\n52,54,2018-02-25,return_pending\r\n53,34,2018-02-26,completed\r\n54,54,2018-02-26,completed\r\n55,18,2018-02-27,completed\r\n56,79,2018-02-28,completed\r\n57,93,2018-03-01,completed\r\n58,22,2018-03-01,completed\r\n59,30,2018-03-02,completed\r\n60,12,2018-03-03,completed\r\n61,63,2018-03-03,completed\r\n62,57,2018-03-05,completed\r\n63,70,2018-03-06,completed\r\n64,13,2018-03-07,completed\r\n65,26,2018-03-08,completed\r\n66,36,2018-03-10,completed\r\n67,79,2018-03-11,completed\r\n68,53,2018-03-11,completed\r\n69,3,2018-03-11,completed\r\n70,8,2018-03-12,completed\r\n71,42,2018-03-12,shipped\r\n72,30,2018-03-14,shipped\r\n73,19,2018-03-16,completed\r\n74,9,2018-03-17,shipped\r\n75,69,2018-03-18,completed\r\n76,25,2018-03-20,completed\r\n77,35,2018-03-21,shipped\r\n78,90,2018-03-23,shipped\r\n79,52,2018-03-23,shipped\r\n80,11,2018-03-23,shipped\r\n81,76,2018-03-23,shipped\r\n82,46,2018-03-24,shipped\r\n83,54,2018-03-24,shipped\r\n84,70,2018-03-26,placed\r\n85,47,2018-03-26,shipped\r\n86,68,2018-03-26,placed\r\n87,46,2018-03-27,placed\r\n88,91,2018-03-27,shipped\r\n89,21,2018-03-28,placed\r\n90,66,2018-03-30,shipped\r\n91,47,2018-03-31,placed\r\n92,84,2018-04-02,placed\r\n93,66,2018-04-03,placed\r\n94,63,2018-04-03,placed\r\n95,27,2018-04-04,placed\r\n96,90,2018-04-06,placed\r\n97,89,2018-04-07,placed\r\n98,41,2018-04-07,placed\r\n99,85,2018-04-09,placed\r\n",
    "hash": "7deaec91356accb3cf8908934a8af81c",
    "path": "seeds/raw_orders.csv"
  },
  "seeds/raw_payments.csv": {
    "contents": "id,order_id,payment_method,amount\n1,1,credit_card,1000\n2,2,credit_card,2000\n3,3,coupon,100\n4,4,coupon,2500\n5,5,bank_transfer,1700\n6,6,credit_card,600\n7,7,credit_card,1600\n8,8,credit_card,2300\n9,9,gift_card,2300\n10,9,bank_transfer,0\n11,10,bank_transfer,2600\n12,11,credit_card,2700\n13,12,credit_card,100\n14,13,credit_card,500\n15,13,bank_transfer,1400\n16,14,bank_transfer,300\n17,15,coupon,2200\n18,16,credit_card,1000\n19,17,bank_transfer,200\n20,18,credit_card,500\n21,18,credit_card,800\n22,19,gift_card,600\n23,20,bank_transfer,1500\n24,21,credit_card,1200\n25,22,bank_transfer,800\n26,23,gift_card,2300\n27,24,coupon,2600\n28,25,bank_transfer,2000\n29,25,credit_card,2200\n30,25,coupon,1600\n31,26,credit_card,3000\n32,27,credit_card,2300\n33,28,bank_transfer,1900\n34,29,bank_transfer,1200\n35,30,credit_card,1300\n36,31,credit_card,1200\n37,32,credit_card,300\n38,33,credit_card,2200\n39,34,bank_transfer,1500\n40,35,credit_card,2900\n41,36,bank_transfer,900\n42,37,credit_card,2300\n43,38,credit_card,1500\n44,39,bank_transfer,800\n45,40,credit_card,1400\n46,41,credit_card,1700\n47,42,coupon,1700\n48,43,gift_card,1800\n49,44,gift_card,1100\n50,45,bank_transfer,500\n51,46,bank_transfer,800\n52,47,credit_card,2200\n53,48,bank_transfer,300\n54,49,credit_card,600\n55,49,credit_card,900\n56,50,credit_card,2600\n57,51,credit_card,2900\n58,51,credit_card,100\n59,52,bank_transfer,1500\n60,53,credit_card,300\n61,54,credit_card,1800\n62,54,bank_transfer,1100\n63,55,credit_card,2900\n64,56,credit_card,400\n65,57,bank_transfer,200\n66,58,coupon,1800\n67,58,gift_card,600\n68,59,gift_card,2800\n69,60,credit_card,400\n70,61,bank_transfer,1600\n71,62,gift_card,1400\n72,63,credit_card,2900\n73,64,bank_transfer,2600\n74,65,credit_card,0\n75,66,credit_card,2800\n76,67,bank_transfer,400\n77,67,credit_card,1900\n78,68,credit_card,1600\n79,69,credit_card,1900\n80,70,credit_card,2600\n81,71,credit_card,500\n82,72,credit_card,2900\n83,73,bank_transfer,300\n84,74,credit_card,3000\n85,75,credit_card,1900\n86,76,coupon,200\n87,77,credit_card,0\n88,77,bank_transfer,1900\n89,78,bank_transfer,2600\n90,79,credit_card,1800\n91,79,credit_card,900\n92,80,gift_card,300\n93,81,coupon,200\n94,82,credit_card,800\n95,83,credit_card,100\n96,84,bank_transfer,2500\n97,85,bank_transfer,1700\n98,86,coupon,2300\n99,87,gift_card,3000\n100,87,credit_card,2600\n101,88,credit_card,2900\n102,89,bank_transfer,2200\n103,90,bank_transfer,200\n104,91,credit_card,1900\n105,92,bank_transfer,1500\n106,92,coupon,200\n107,93,gift_card,2600\n108,94,coupon,700\n109,95,coupon,2400\n110,96,gift_card,1700\n111,97,bank_transfer,1400\n112,98,bank_transfer,1000\n113,99,credit_card,2400\n",
    "hash": "8e525f53c0858fba7660598144549edf",
    "path": "seeds/raw_payments.csv"
  },
  "models/staging/stg_customers.sql": {
    "contents": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed\n",
    "hash": "d8913e11b7a0453d67a8bc952294c85c",
    "path": "models/staging/stg_customers.sql"
  },
  "models/staging/stg_payments.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: stg_payments\n    columns:\n      - name: payment_id\n        tests:\n          - unique\n          - not_null\n      - name: payment_method\n        tests:\n          - accepted_values:\n              values: ['credit_card', 'coupon', 'bank_transfer', 'gift_card']\n",
    "hash": "c8e585822456f8e4829f288183bed8eb",
    "path": "models/staging/stg_payments.yml"
  },
  "models/staging/stg_orders.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: stg_orders\n    columns:\n      - name: order_id\n        tests:\n          - unique\n          - not_null\n      - name: status\n        tests:\n          - accepted_values:\n              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']",
    "hash": "2198e71349dbcfbcc19c5ae642cbb7f8",
    "path": "models/staging/stg_orders.yml"
  },
  "models/staging/stg_customers.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: stg_customers\n    columns:\n      - name: customer_id\n        tests:\n          - unique\n          - not_null",
    "hash": "586b00aaa96abe59f9482a8ca9d34197",
    "path": "models/staging/stg_customers.yml"
  },
  "models/staging/stg_payments.sql": {
    "contents": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed\n",
    "hash": "15a7fc11e852683912ba8a5f5baf4e94",
    "path": "models/staging/stg_payments.sql"
  },
  "models/staging/stg_orders.sql": {
    "contents": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed\n",
    "hash": "6ff3f19449bee50e0191174143264cda",
    "path": "models/staging/stg_orders.sql"
  },
  "models/marts/expenses.yml": {
    "contents": "version: 2\n\nmetrics:\n  - name: expenses\n    label: Expenses\n    model: ref('orders')\n    description: \"The total expenses of our jaffle business\"\n\n    type: sum\n    sql: amount / 4\n\n    timestamp: order_date\n    time_grains: [day, week, month, year]\n\n    dimensions:\n      - customer_status\n      - has_coupon_payment\n      - has_bank_transfer_payment\n      - has_credit_card_payment\n      - has_gift_card_payment\n\n    filters:\n      - field: status\n        operator: '='\n        value: \"'completed'\"",
    "hash": "e2123c40d16c4cf2978863e67fd90af7",
    "path": "models/marts/expenses.yml"
  },
  "models/marts/orders.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: orders\n    description: This table has basic information about orders, as well as some derived facts based on payments\n\n    columns:\n      - name: order_id\n        tests:\n          - unique\n          - not_null\n        description: This is a unique identifier for an order\n\n      - name: customer_id\n        description: Foreign key to the customers table\n        tests:\n          - not_null\n\n      - name: order_date\n        description: Date (UTC) that the order was placed\n\n      - name: status\n        description: '{{ doc(\"orders_status\") }}'\n        tests:\n          - accepted_values:\n              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']\n\n      - name: amount\n        description: Total amount (AUD) of the order\n        tests:\n          - not_null\n\n      - name: credit_card_amount\n        description: Amount of the order (AUD) paid for by credit card\n        tests:\n          - not_null\n\n      - name: coupon_amount\n        description: Amount of the order (AUD) paid for by coupon\n        tests:\n          - not_null\n\n      - name: bank_transfer_amount\n        description: Amount of the order (AUD) paid for by bank transfer\n        tests:\n          - not_null\n\n      - name: gift_card_amount\n        description: Amount of the order (AUD) paid for by gift card\n        tests:\n          - not_null\n\n      - name: had_credit_card_payment\n        description: Whether the order had payment for by credit card\n        tests:\n          - not_null\n\n      - name: had_coupon_payment\n        description: Whether the order had payment by coupon\n        tests:\n          - not_null\n\n      - name: had_bank_transfer_payment\n        description: Whether the order had payment by bank transfer\n        tests:\n          - not_null\n\n      - name: had_gift_card_payment\n        description: Whether the order had payment by gift card\n        tests:\n          - not_null\n\n      - name: customer_id\n        description: This is a unique identifier for a customer\n\n      - name: first_name\n        description: Customer's first name. PII.\n\n      - name: last_name\n        description: Customer's last name. PII.\n\n      - name: first_order\n        description: Date (UTC) of a customer's first order\n\n      - name: most_recent_order\n        description: Date (UTC) of a customer's most recent order\n\n      - name: number_of_orders\n        description: Count of the number of orders a customer has placed\n\n      - name: customer_status\n        description: The status of the customer and whether they are churned, at risk of churn, or healthy",
    "hash": "1814b353e6b58604f6d13635c3f7aa2d",
    "path": "models/marts/orders.yml"
  },
  "models/marts/average_order_amount.yml": {
    "contents": "version: 2\nmetrics:\n  - name: average_order_amount\n    label: Average Order Amount\n    model: ref('orders')\n    description: \"The average size of a jaffle order\"\n\n    type: average\n    sql: amount\n\n    timestamp: order_date\n    time_grains: [day, week, month]\n\n    dimensions:\n      - has_credit_card_payment\n      - has_coupon_payment\n      - has_bank_transfer_payment\n      - has_gift_card_payment\n      - customer_status",
    "hash": "6918b8e0ea629441e176742b1de906b3",
    "path": "models/marts/average_order_amount.yml"
  },
  "models/marts/revenue.yml": {
    "contents": "version: 2\n\nmetrics:\n  - name: revenue\n    label: Revenue\n    model: ref('orders')\n    description: \"The total revenue of our jaffle business\"\n\n    type: sum\n    sql: amount \n\n    timestamp: order_date\n    time_grains: [day, week, month, year]\n\n    dimensions:\n      - customer_status\n      - has_coupon_payment\n      - has_bank_transfer_payment\n      - has_credit_card_payment\n      - has_gift_card_payment\n\n    filters:\n      - field: status\n        operator: '='\n        value: \"'completed'\"",
    "hash": "2cbadb80934d06dcda2c9308c847cf22",
    "path": "models/marts/revenue.yml"
  },
  "models/marts/profit.yml": {
    "contents": "version: 2\n\nmetrics:\n  - name: profit\n    label: Profit\n    description: \"The total money we get to take home from our jaffle business\"\n\n    type: expression\n    sql: \"{{metric('revenue')}} - {{metric('expenses')}}\" \n\n    timestamp: order_date\n    time_grains: [day, week, month, year]\n\n    dimensions:\n      - customer_status\n      - has_coupon_payment\n      - has_bank_transfer_payment\n      - has_credit_card_payment\n      - has_gift_card_payment",
    "hash": "a81e67a5e5036faa3ece5b8b50d13130",
    "path": "models/marts/profit.yml"
  },
  "models/marts/orders.sql": {
    "contents": "with orders as (\n\n    select * from {{ ref('int_order_payments_pivoted') }}\n\n)\n,\ncustomers as (\n\n    select * from {{ ref('int_customer_order_history_joined') }}\n\n)\n,\nfinal as (\n\n    select \n        *\n    from orders \n    left join customers using (customer_id)\n\n)\n\nselect * from final",
    "hash": "7149857c564ae36662c88b53db6bad24",
    "path": "models/marts/orders.sql"
  },
  "models/marts/docs.md": {
    "contents": "{% docs orders_status %}\n\nOrders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |\n\n\n{% enddocs %}\n",
    "hash": "4e27844c90eb238aac3c6a96b27bf0ed",
    "path": "models/marts/docs.md"
  },
  "models/intermediate/int_order_payments_pivoted.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: int_order_payments_pivoted\n    description: This table has basic information about orders, as well as some derived facts based on payments\n\n    columns:\n      - name: order_id\n        tests:\n          - unique\n          - not_null\n        description: This is a unique identifier for an order\n\n      - name: customer_id\n        description: Foreign key to the customers table\n        tests:\n          - not_null\n\n      - name: order_date\n        description: Date (UTC) that the order was placed\n\n      - name: status\n        description: '{{ doc(\"orders_status\") }}'\n        tests:\n          - accepted_values:\n              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']\n\n      - name: amount\n        description: Total amount (AUD) of the order\n        tests:\n          - not_null\n\n      - name: credit_card_amount\n        description: Amount of the order (AUD) paid for by credit card\n        tests:\n          - not_null\n\n      - name: coupon_amount\n        description: Amount of the order (AUD) paid for by coupon\n        tests:\n          - not_null\n\n      - name: bank_transfer_amount\n        description: Amount of the order (AUD) paid for by bank transfer\n        tests:\n          - not_null\n\n      - name: gift_card_amount\n        description: Amount of the order (AUD) paid for by gift card\n        tests:\n          - not_null\n\n      - name: had_credit_card_payment\n        description: Whether the order had payment for by credit card\n        tests:\n          - not_null\n\n      - name: had_coupon_payment\n        description: Whether the order had payment by coupon\n        tests:\n          - not_null\n\n      - name: had_bank_transfer_payment\n        description: Whether the order had payment by bank transfer\n        tests:\n          - not_null\n\n      - name: had_gift_card_payment\n        description: Whether the order had payment by gift card\n        tests:\n          - not_null",
    "hash": "419dc7c77514dad10fd604a780a1ed6e",
    "path": "models/intermediate/int_order_payments_pivoted.yml"
  },
  "models/intermediate/int_customer_order_history_joined.yml": {
    "contents": "version: 2\n\nmodels:\n  - name: int_customer_order_history_joined\n    description: This table has basic information about a customer, as well as some derived facts based on a customer's orders\n\n    columns:\n      - name: customer_id\n        description: This is a unique identifier for a customer\n        tests:\n          - unique\n          - not_null\n\n      - name: first_name\n        description: Customer's first name. PII.\n\n      - name: last_name\n        description: Customer's last name. PII.\n\n      - name: first_order\n        description: Date (UTC) of a customer's first order\n\n      - name: most_recent_order\n        description: Date (UTC) of a customer's most recent order\n\n      - name: number_of_orders\n        description: Count of the number of orders a customer has placed\n\n      - name: customer_status\n        description: The status of the customer and whether they are churned, at risk of churn, or healthy",
    "hash": "87bee85d7900c7a212f4922e8b62f30d",
    "path": "models/intermediate/int_customer_order_history_joined.yml"
  },
  "models/intermediate/int_order_payments_pivoted.sql": {
    "contents": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n        case \n            when {{ payment_method }}_amount is not null then true\n            else false \n        end as had_{{payment_method}}_payment,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final\n",
    "hash": "6e8f6eb85056f0a52314bc08b0a7959f",
    "path": "models/intermediate/int_order_payments_pivoted.sql"
  },
  "models/intermediate/int_customer_order_history_joined.sql": {
    "contents": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        case \n            when most_recent_order <= '2018-01-15' then 'Churned'\n            when most_recent_order <= '2018-03-01' then 'Churn Risk'\n            else 'Healthy'\n        end as customer_status,\n        customer_orders.number_of_orders\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n\n)\n\nselect * from final\n",
    "hash": "495d88cf493beb13b876cf33637f28b4",
    "path": "models/intermediate/int_customer_order_history_joined.sql"
  }
}
